.\" First test 
.\" $> man ./elastico.1
.\" See this pages for examples ::: http://tinyurl.com/y6hratuz
.\" also this ::: http://tinyurl.com/ynaylg
.TH ELASTICO 1 
.SH NAME 
elastico \- search log lines stored in Elasticsearch
.SH SYNOPSIS
.B elastico 
[\fB-h\fR] 
.TP
.B elastico 
[\fB-d\fR] [\fB-l\fR num] [\fB-t\fR TIMESTRING] [\fB-s\fR] [\fB-h\fR] 
.IR QUERY 
.SH DESCRIPTION
The fastest way to start to use this program is to read  the examples section at the end of this document.
.TP
The syntax of the QUERY is the so called \fBLucene Query Syntax\fR. It is almost indentical of the one accpeted by Kibana interface. 
.TP
By default the search is made into the \fBlclslogs\fR index, that is, we search into log files lines stored in \fBpsmetric01:/u2/logs\fR and processed by Elasticsearch. 
.TP
By default the search is limited to the log produced in the last 48 hours. If parameter \fB-l\fR or \fB-h\fR is present such restriction falls.
.TP
By default the search is made into the \fBsrc\fR field of each document. The field contains the log line as red from \fBpsmetric01:/u2/logs/*/*\fR.
.TP
At the time of writing this text the \fBlclslogs\fR index contains the following fields: 
.TP
.BR \fBdate\fR 
Date appearing in the logfile, extended to contain a guessed value for the year.  
.TP
.BR \fBmachine\fR 
Machine producing the message. (eg. psmetric01, psana101 etc. )
.TP
.BR service
Service producing the message (eg. cron, systemd, ... )
.TP
.BR message
The message part of a log line. (eg. "Cannot create socket to [psmonit]:8020 -- Connection refused")
.TP
.BR file
Logfile name where the message was found (eg. messages, cron, etc. )
.TP
.BR src
To simplify the search by shell this field was added in a second phase. It contains the log line as it is recorded in 'psmetric01:/u2/logs/*/*'. eg:
 "Dec  5 14:57:27 psana1507 monit[6494]: Cannot create socket to [psmonit]:8020 -- Connection refused"  
.SH OPTIONS
.TP
.BR -d  
Shows \fBdebug\fR informations. Intermediate values and global variables that can simplify the understanding of the program in case something goes wrong. The debug information is printed at the end of the search results into STDERR.
.TP
.BR -l 
Maximum number of \fBlines\fR to retrive from Elasticsearch. It must be a positive integer. Default to 20. The current maximum value is 10_000. This parameter is complementary to '-t'. When '-l' and '-t' are used together then '-l' prevails.
.TP
.BR -h
If given as the only parameter then the program will output the documentation. If there are other parameters then the matched words in output will be \fBhighlighted\fR. Words of specific fields as e.g. machine:foo will not be highlithed, it only applies to the default \fBsrc\fR field. Default to false.
.TP 
.BR -s
By default this program asks Elasticsearch to \fBsort\fR the results by time. With this parameter Elasticsearch will be asked instead to sort the results by relevance. 
.TP
.BR -t 
\fBTime window\fR. With this parameter we tell Elasticsearch we are interested in filtering the search to to a specific time window.
.TP
Sometimes the time limits will not be honoured and some of the older log will be discarded. If '-t' parameter is called together with parameter '-l' then parameter '-l' will prevail. If parameter '-t' is called without parameter '-l' and its implied number of results would be larger than 10_000 then the default number of lines will be printed, that is 20. When a cuts needs to be done on the loglines by default older logs are cut.       
.TP  
There are three accepted syntaxes to specifiy the time window:
.TP
.nf 
1] Delta backward in time from present time.

 -t ABS_DELTA
    ABS_DELTA matches regexp /\\d+[dhm]/

 -t 10m             
  => chooses logs produces in the last 10 minutes.
.TP
2] Delta backward/forward in time from a specified date-time instant.

 -t [YYYY]-[MMM]-[DD]-[HH:MM]__[+-]ABS_DELTA

 -t  2018-dec-10-10:30__-10m
 -t  dec-10__+3d 
  => chooses logs produced from dec-10 to 3 days afterwards.
.TP
3] Explicit time window described by two date-time points. 

 -t [YYYY]-[MMM]-[DD]-[HH:MM]__[YYYY]-[MMM]-[DD]-[HH:MM]

 -t 2018-dec-10-15:50__2018-dec-15-16:30  
  => chooses logs produced in between 2 specific points in time.        

 -t dec-10__dec-15
  => chooses logs produced from dec-10 to dec-15 (in the current year).
 
 -t 14:30__15:15
  => chooses logs produced from 14:30 to 15:15 (of today).
.fi
.TP
In general, when data is missing from a time point description values are inferred from the current day. So dec-10 is auto completed to 2018-dec-10 if we are in the year 2018.       
.TP
If the hour is missing then, on the left hand side of a '__' divider it is auto-completed into the first second of the selected, on the right hand side of a '__' divider it is autocompleted to the last second of the selected day. 
.TP       
Given the generality and flexibility of TIMESTRING it is better described by examples than by a formal grammar. See the Examples section.       
.SH REQUIREMENTS
.TP
.BR curl
This software is not at all necessary and the dependency may be removed in future releases
.TP
.BR less
The "man" page visibile with 'elastico -h' goes to default to that pager. There is not a separate man page to keep all the application in a single file, code and documentation.
.TP
.BR ruby
This software is written in Ruby. Rationale; Ruby is some kind of a OO version of Perl. Ideal for intense regexp work.     
.SH EXAMPLES
.nf 
===========================================
==== Simple One Word Query ================
===========================================

# Generic search over a word ... here a machine name 
\fB$> elastico psana101\fR        

# Generic search over a word ... here a service name 
\fB$> elastico monit\fR           

# Generic search over a word ... here a user name    
\fB$> elastico nmingott\fR        

===========================================
=== Special Characters ====================
===========================================

# Generic search over an approximate username 
# Quote is necessary because "~" is special character in Bash.
\fB$> elastic 'omar~'\fR

# Generic search over everything that can be: psana101, psana103 etc.
# Observe that the quotes are fundamental to stop Bash from interpreting
# "*". 
\fB$> elastico 'psana*'\fR        

# Search all log lines where there appear the work "nmingott" somwhere
# AND the machine is a string which contains "metric".
# Booleans MUST BE upcase words.
\fB$> elastico 'nmingott AND machine:*metric*'\fR

# Elaboration respect to the previous example, matching all lines where "nmingott"
# appers and the machine is a string containing *ana* or *metric*.
# This examples shows that (...) is the syntax for  
# grouping of booleans and that it is not necessary to write
# (machine:*metric* OR machine:*ana*) in full.
\fB$> elastico 'nmingott AND machine:(*metric* OR *ana*)'\fR

# See last logs in psmetrico01
\fB$> elastico 'machine:psmetric01'\fR

# See the last 200 log lines in psmetric01
\fB$> elastico -l 200 'machine:psmetric01'\fR

# See the log lines that best metch a string,
# return results according to Elasticsearch 'relevance' 
# algorithm, not by date. In general, more time the string
# is matched in the log line the more a line is 'relevant'.
\fB$> elastico -S 'ana*'\fR

# Hilight the search results 
\fB$> elastico -l 20 -h 'wilko'\fR

# Autocomplete only for a specific number of characters
# In this case all 'psana' followed by 3 characters.
\fB$> psana -h 'psana???'\fR

=============================================
=== Time Window Selections ==================
=============================================

# Show all logs related to 'psana???' in the last
# 5 minutes. With the same syntax we can use the specifiers
# <b>m</b> minutes, <b>h</b> hours, <b>d</b> days.
\fB$> elastico -t 5m 'psana???'\fR

# If we are unhappy about the result and suspect something
# is wrong the first thing to do is to check how 'elastico' interpreted
# the time window. The information is written after the search results, on STDERR.
\fB$> elastico -d -t 5m 'psana???'\fR

# We want to see the results moving around a specific
# point in time. Suppose 5 minutes after 
# the date 15 dic 2018 at 13:00
\fB$> elastico -t 2018-dec-15-13:00__+5m 'psana???'\fR
# or, if we are still in 2018: 
\fB$> elastico -t dec-15-13:00__+5m 'psana???'\fR

# We want to see the results moving around a specific
# point in time. Suppose 10 minutes before
# the date 15 dic 2018 at 13:00
\fB$> elastico -t 2018-dec-15-13:00__-10m 'psana???'\fR
# or, if we are still in 2018: 
\fB$> elastico -t dec-15-13:00__-10m 'psana???'\fR

# We want to see the results between two specific points in time 
\fB$> elastico  -t 2018-dec-15-13:00__2018-dec-16-14:25 'psana101'\fR
or, if we are still in 2018 
\fB$> elastico  -t dec-15-13:00__dec-16-14:25 'psana101'\fR

# We want to see the data in two specific date, all day hours.
# If the hour is not specified and there are two specific date-time
# points then the hour of the date on the left hand side is 00:00,
# the hour for the right hand side is 23:59.
\fB$> elastico  -t dec-15__dec-16 'psana103'\fR

# Filter all today logs generated beween 10:30 and 11:00.
\fB$> elastico  -t 10:30__11:00 'psana103'\fR
.fi 
.SH REFERENCES
-] "Lucene Query Syntax", see https://goo.gl/GPPSdJ
.TP 
-] "Elasticsearch the definitive guide" by Gromley, Tong -- O'Reilly 2015.
.SH SEE ALSO
FOO BAR BAZ useradd(8), passwd(5), nuseradd.debian(8) 
.SH BUGS
No known bugs.
.SH AUTHOR
Dr. Nicola Mingotti (nicola.mingotti@slac.stanford.edu)

